# Generated by Django 3.2.5 on 2021-10-11 16:19

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('Stu', 'Student'), ('Fac', 'Faculty'), ('Sta', 'HCC Staff'), ('Pae', 'Paediatrician'), ('Den', 'Dentist'), ('Ort', 'Orthopedic Surgeon'), ('Der', 'Dermatologist'), ('Psy', 'Psychiatrist'), ('Oph', 'Ophthalmologist'), ('Gen', 'General Medicine'), ('Psc', 'Psychological Counselor'), ('Eye', 'Eye Specialist'), ('Ent', 'ENT Surgeon'), ('Gyn', 'Gynaecologist'), ('Ayu', 'Ayurvedic Consultant'), ('Hos', 'Hospital')], default='Stu', max_length=3, verbose_name='User Type')),
                ('middle_name', models.CharField(max_length=30, verbose_name='Middle Name')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other'), ('N', 'Would not like to disclose')], max_length=1, verbose_name='Gender')),
                ('phone', models.CharField(max_length=20, unique=True, verbose_name='User Contact Number')),
                ('emergency_phone', models.CharField(max_length=20, verbose_name='Emergency Contact Number')),
                ('forgot_pwd_token', models.CharField(max_length=50, verbose_name='Forgot Password Token')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.TimeField(verbose_name='Start Time')),
                ('status', models.CharField(choices=[('VI', 'Visited'), ('DM', 'Doctor Missing'), ('PM', 'Patient Missing'), ('EX', 'Expired'), ('CA', 'Cancelled')], max_length=2, verbose_name='Status')),
                ('create_time', models.TimeField(auto_now_add=True, verbose_name='Create Time')),
            ],
        ),
        migrations.CreateModel(
            name='Config',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('obj', models.JSONField()),
            ],
        ),
        migrations.CreateModel(
            name='Diagnosis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('diagnosis', models.TextField(verbose_name='Diagnosis')),
                ('appointment_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.appointment', verbose_name='Appointment ID')),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.BinaryField()),
            ],
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60, unique=True, verbose_name='Item Name')),
                ('units', models.PositiveIntegerField(default=0, verbose_name='Units')),
                ('category', models.CharField(choices=[('M', 'Medicine'), ('E', 'Equipment')], max_length=1, verbose_name='Category')),
                ('cost_per_unit', models.FloatField(verbose_name='Cost Per Unit')),
            ],
        ),
        migrations.CreateModel(
            name='Prescription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dosage', models.CharField(max_length=10, verbose_name='Daily Dosage')),
                ('medicine_units', models.PositiveIntegerField(verbose_name='Medicine Units')),
                ('diagnosis_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.diagnosis', verbose_name='Diagnosis ID')),
                ('inventory_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.inventory', verbose_name='Inventory ID')),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('units', models.PositiveIntegerField(verbose_name='Units')),
                ('inventory_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.inventory', verbose_name='Inventory ID')),
                ('prescription_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.prescription', verbose_name='Prescription ID')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User ID')),
            ],
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_time', models.TimeField(verbose_name='Doctor Entry Time')),
                ('exit_time', models.TimeField(verbose_name='Doctor Exit Time')),
                ('day', models.CharField(choices=[('Mon', 'Monday'), ('Tue', 'Tuesday'), ('Wed', 'Wednesday'), ('Thu', 'Thursday'), ('Fri', 'Friday'), ('Sat', 'Saturday'), ('Sun', 'Sunday')], max_length=3, verbose_name='Day of Visit')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User ID')),
            ],
        ),
        migrations.CreateModel(
            name='MedicalHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('A', 'Allergies'), ('M', 'Medications'), ('S', 'Surgery')], max_length=1, verbose_name='Category')),
                ('description', models.TextField(verbose_name='Description')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User ID')),
            ],
        ),
        migrations.CreateModel(
            name='MedicalCertificate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('diagnosis_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.diagnosis', verbose_name='Diagnosis ID')),
                ('document_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.document', verbose_name='Document ID')),
            ],
        ),
        migrations.CreateModel(
            name='Emergency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField(verbose_name='Reason for Emergency')),
                ('location', models.CharField(choices=[('BEA', 'Beach Gate'), ('UND', 'Underpass'), ('LHC', 'Lecture Hall Complex - C'), ('GIH', 'Girls Hostels'), ('MEC', 'Mechanical Department'), ('BBC', 'Basketball Court & Swimming Pool'), ('SJA', 'Silver Jubilee Auditorium'), ('SBI', 'SBI Bank'), ('MET', 'Mega Towers'), ('BOH', 'Boys Hostels'), ('PAV', 'Pavillion'), ('SAC', 'Student Activity Center'), ('MAB', 'Main Building')], max_length=3, verbose_name='Location')),
                ('status', models.CharField(choices=[('R', 'Received'), ('A', 'Acknowledged')], max_length=1, verbose_name='Status')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User ID')),
            ],
        ),
        migrations.AddField(
            model_name='appointment',
            name='schedule_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.schedule', verbose_name='Schedule ID'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='user_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User ID'),
        ),
        migrations.AddField(
            model_name='user',
            name='photo_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.document', verbose_name='User Photo ID'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
